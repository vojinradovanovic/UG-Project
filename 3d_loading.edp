/* 3d_loading:
    3D VMT model, with ILM and loading:
    - exports into paraview
    - mock force values, dimensions
    - has time evolution
    - has ILM
    - measures loading (von Mises stress)
    - new force evolution
    */

// load libraries
    load "iovtk"
    load "msh3"

// define model element constants
    real[string] vitreous = ["K", 1,    // stiffness
                            "nu", 0.49, // Poisson's ratio
                            "l", 1];    // length

    real[string] retina = ["K", 2,      // stiffness
                            "nu", 0.49, // Poisson's ratio
                            "l", 1];    // length

    real[string] ILM = ["K", 50,    // stiffness
                        "nu", 0.49, // Poisson's ratio
                        "l", 0.2];  // length                        

    real[string] VMT = ["r", 1];    // VMT radius
    VMT["A"] = VMT["r"]^2*pi;       // VMT cross-sectional area

    real tEnd = 1;                  // final time of simulation
    real tStep = 0.1;               // time step of simulation
    int[string] forceTypes = ["lin", 0,
                            "quad", 1,
                            "inv_exp", 2,
                            "null", 3];    // force types
    real endForce = 10;             // traction force at time tEnd

    tEnd = floor(tEnd/tStep) * tStep; // adjust tEnd to an integer multiple of tStep if it is not

    real wait = 0;      // hold graphs while plotting; 1-true, 0-false

// define model functions and macros
    macro lambda(K, nu) (K*nu / ( (1+nu) * (1-2*nu)) ) // first Lame parameter
    macro mu(K, nu) (K/(2*(1+nu)))                     // second Lame parameter

    // generates an array of proposed forces at time t
    func real[int] Forces(real t) 
    {
        real[int] values = [t/tEnd,
                            (t/tEnd)^2,
                            (1-exp(-2*t))/(1-exp(-2*tEnd)),
                            0.] * endForce;

        return values;
    }

// define FEM parameters
    int perimeterMeshPNo = 20;
    int heightMeshPNo = 5;
    int ILMheightMeshPNo = 2;
    int[string] labs = ["border", 201,
                            "fixed", 301];
    int[string] regs = ["inner", 2001,
                        "fixed", 3001,
                        "VMT", 3002,
                        "vitreous", 4001,
                        "retina", 4002,
                        "ILM", 4003];

// generate meshes
    // initial 2D mesh
    border perimeter(t=0, 2*pi){x=cos(t); y=sin(t); label=labs["border"];} // generate VMT perimeter
    mesh Th2 = buildmesh(perimeter(perimeterMeshPNo), fixedborder=true); // generate z=0 cross-section in 2D space
    int[int] changeRegs = [0, regs["inner"]];   // prepare region values for changing
    Th2 = change(Th2, region = changeRegs);     //change region values
    
    // 3D vitreous mesh
    int[int] lup = [regs["inner"], regs["fixed"]],
                ldown = [regs["inner"], regs["VMT"]],
                lmid = [labs["border"], labs["fixed"]];     // prepare labels for 3d mesh
    int[int] tetraRegs = [regs["inner"], regs["vitreous"]]; // prepare labels for tetrahedra
    mesh3 ThVitr0 = buildlayers(Th2, heightMeshPNo, zbound = [ILM["l"]/2, vitreous["l"]+ILM["l"]/2], region = tetraRegs,
                                labelup = lup, labeldown = ldown, labelmid = lmid); // generate 3d vitreous cylinder

    // 3D retinal mesh
    lup = [regs["inner"], regs["VMT"]];
    ldown = [regs["inner"], regs["fixed"]];
    lmid = [labs["border"], labs["fixed"]];      // prepare labels for 3d mesh
    tetraRegs = [regs["inner"], regs["retina"]]; // prepare labels for tetrahedra
    mesh3 ThRet0 = buildlayers(Th2, heightMeshPNo, zbound = [-retina["l"]-ILM["l"]/2, -ILM["l"]/2], region = tetraRegs,
                                labelup = lup, labeldown = ldown, labelmid = lmid); // generate 3d retinal cylinder

    // 3D ILM mesh
    lup = [regs["inner"], regs["VMT"]];
    ldown = [regs["inner"], regs["VMT"]];
    lmid = [labs["border"], labs["fixed"]];      // prepare labels for 3d mesh
    tetraRegs = [regs["inner"], regs["ILM"]]; // prepare labels for tetrahedra
    mesh3 ThILM0 = buildlayers(Th2, ILMheightMeshPNo, zbound = [-ILM["l"]/2, ILM["l"]/2], region = tetraRegs,
                                labelup = lup, labeldown = ldown, labelmid = lmid); // generate 3d ilm cylinder

    // 3D VMT mesh
    mesh3 Th0 = ThVitr0 + ThILM0 + ThRet0;  /* total mesh at time 0;
                                    labels on both meshes are matched, but in case of discrepancy
                                    the label from the first mesh is kept */

    // meshes to change
    mesh3 ThVitr = ThVitr0;
    mesh3 ThRet = ThRet0;
    mesh3 ThILM = ThILM0;
    mesh3 Th = Th0;

    plot(Th, wait = wait);

// generate function space
    int orderSpace = 1;
    func PSpace = P1;
    fespace Vh(Th, [PSpace, PSpace, PSpace]);
    Vh [ux, uy, uz];                // current displacement
    Vh [uxtotal, uytotal, uztotal]; // total displacement from initial iteration
    Vh [vx, vy, vz];                // variational parameters

    int orderStress = 0;    // stress should be computed as a P0 element
    func PStress = P0;
    fespace Wh(Th, PStress); // the stress fe space
    Wh vonMises;            // the von Mises stress

    exec("pause\n\n"
            +"WARNING: Check that function spaces have corresponding integer order!!! (section: generate function space) \n");

// generate other macros
    real sqrt2 = sqrt(2.);

    macro Epsilon(ux, uy, uz) [dx(ux), dy(uy), dz(uz),
        (dz(ux)+dy(uy))/sqrt2,
        (dz(uy)+dx(uz))/sqrt2,
        (dy(ux)+dx(uz))/sqrt2]  // the strain vector
                                // the sqrt2 is there for simpler notation in LHS

    macro Divergence(ux, uy, uz) (dx(ux) + dy(uy) + dz(uz)) // the divergence of a vector

    macro lambdaSH(element) lambda(element["K"], element["nu"]) // shorthand for lambda of element
    macro muSH(element) mu(element["K"], element["nu"])         // shorthand for mu of element

    macro LHS(ux, uy, uz, vx, vy, vz, element)
        lambdaSH(element) * Divergence(vx, vy, vz) * Divergence(ux, uy, uz)
        + 2. * muSH(element) * ( Epsilon(vx, vy, vz)' * Epsilon(ux, uy, uz) )   // left-hand side of the equation

    macro sumSH(element) lambdaSH(element) + 2*muSH(element) // shorthand of the sum for the elasticity matrix

    macro Elasticity(element) [[sumSH(element), lambdaSH(element), lambdaSH(element), 0, 0, 0],
                                [lambdaSH(element), sumSH(element), lambdaSH(element), 0, 0, 0],
                                [lambdaSH(element), lambdaSH(element), sumSH(element), 0, 0, 0],
                                [0, 0, 0, sqrt2*muSH(element), 0, 0],
                                [0, 0, 0, 0, sqrt2*muSH(element), 0],
                                [0, 0, 0, 0, 0, sqrt2*muSH(element)]] // the elasticity matrix
                                                                        // sqrt(2) reverses the /sqrt(2) in Epsilon
    
    macro Sigma(ux, uy, uz, element) Elasticity(element) * Epsilon(ux, uy, uz) // the stress vector

    // calculating von Mises macro
    macro calcVonMises(ux, uy, uz, element, elementMesh)
    {
        fespace Wh#elementMesh(elementMesh, [PStress, PStress, PStress, PStress, PStress, PStress]);
        Wh#elementMesh [sigmaxx, sigmayy, sigmazz, sigmaxy, sigmayz, sigmaxz];

        [sigmaxx, sigmayy, sigmazz, sigmaxy, sigmayz, sigmaxz] = Sigma(ux, uy, uz, element);

        vonMises = vonMises + sqrt(0.5*( (sigmaxx-sigmayy)^2 + (sigmayy-sigmazz)^2 + (sigmaxx-sigmazz)^2 )
                                    + 3*( sigmaxy^2 + sigmayz^2 + sigmaxz^2 )
                                    );
    } //

// define parameters for export into ParaView
    int[int] Order = [orderSpace, orderStress]; // corresponds to the variable order
    string DataName = "Displacement von_Mises"; // variable names in the vtu file

// run simulations
    for [force, i: forceTypes]
    {
        // solve system for different time values
        for(int j=0; j<=tEnd/tStep; j++)
        {
            // calculate increase in force
                real deltaF=0;

                if(j>0)
                    deltaF = Forces(j*tStep)[i] - Forces((j-1)*tStep)[i];

            // generate variational form
                varf vElasticity ([ux, uy, uz], [vx, vy, vz])
                    = int3d(Th, regs["vitreous"])(LHS(ux, uy, uz, vx, vy, vz, vitreous))
                    + int3d(Th, regs["retina"])(LHS(ux, uy, uz, vx, vy, vz, retina))
                    + int3d(Th, regs["ILM"])(LHS(ux, uy, uz, vx, vy, vz, ILM))
                    + int3d(Th)(deltaF * vz) //RHS of the equation
                    + on(regs["fixed"], ux=0, uy=0, uz=0)
                    + on(labs["fixed"], ux=0, uy=0, uz=0)
                    ;
            
            // solve the system
                matrix StiffnessMat = vElasticity(Vh, Vh, solver=sparsesolver);
                real[int] LoadVec = vElasticity(0, Vh);
                ux[] = StiffnessMat^-1 * LoadVec;

            // move the mesh
                ThVitr = movemesh(ThVitr, [x+ux, y+uy, z+uz]);
                ThRet = movemesh(ThRet, [x+ux, y+uy, z+uz]);
                ThILM = movemesh(ThILM, [x+ux, y+uy, z+uz]);
                Th = movemesh(Th, [x+ux, y+uy, z+uz]);

            // calculate total displacement
                [uxtotal, uytotal, uztotal] = [uxtotal, uytotal, uztotal] + [ux, uy, uz];

            // compute the stress vector and von Mises stress
                calcVonMises(uxtotal, uytotal, uztotal, vitreous, ThVitr);
                calcVonMises(uxtotal, uytotal, uztotal, retina, ThRet);
                calcVonMises(uxtotal, uytotal, uztotal, ILM, ThILM);

            // below, j*tStep is multiplied by 10 for convenience and postprocessed in ParaView
                savevtk("D:\\FAKS\\UoE\\24-25 FYP\\FreeFEM Code\\3d_loading\\3d_loading_Th_"+force+"_"+j*tStep*10+".vtu",
                    Th, [ux, uy, uz], vonMises, dataname=DataName, order=Order);

            // plot
                plot(Th, wait = (j==tEnd/tStep)*wait);

            // reset von Mises after calculation
                vonMises = 0;
        }

        // reset and variables after calculation
            ThVitr = ThVitr0;
            ThRet = ThRet0;
            ThILM = ThILM0;
            Th = Th0;

            [uxtotal, uytotal, uztotal] = [0, 0, 0];
    }